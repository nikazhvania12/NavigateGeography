{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nzhvania\\\\Desktop\\\\navigate-geography\\\\src\\\\Components\\\\HelperComponents\\\\WorldMap.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\nimport { geoCentroid } from \"d3-geo\";\nimport { feature } from \"topojson-client\";\nimport '../ComponentStyles/worldmap.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction WorldMap() {\n  _s();\n  const [countryDataJson, setCountryDataJson] = useState(null);\n  const [selectedCountry, setSelectedCountry] = useState('');\n  const [center, setCenter] = useState([0, 0]);\n  const [zoom, setZoom] = useState(1);\n  const [cont, setCountries] = useState(0);\n  useEffect(() => {\n    async function fetchCountryData() {\n      const res = await fetch(\"/CountriesView.json\");\n      const json = await res.json();\n      setCountryDataJson(json);\n    }\n    fetchCountryData();\n  }, []);\n  useEffect(() => {\n    const countries = countryDataJson && feature(countryDataJson, countryDataJson.objects.countries).features;\n    if (countries) {\n      const match = countries.find(x => x.properties.name.toLowerCase() === selectedCountry.trim().toLowerCase());\n      const nameString = countries.map(el => el.properties.name).join(', ');\n      setCountries(nameString);\n      console.log(cont);\n      if (match) {\n        console.log(match);\n        setCenter(geoCentroid(match));\n        setZoom(2);\n      } else {\n        setZoom(1);\n        setCenter([0, 0]);\n      }\n    }\n  }, [selectedCountry]);\n  return countryDataJson && /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: selectedCountry,\n      onChange: e => setSelectedCountry(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ComposableMap, {\n      projection: \"geoMercator\",\n      className: \"map-container\",\n      children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n        zoom: zoom,\n        center: center,\n        minZoom: 1,\n        maxZoom: 8,\n        translateExtent: [[-1000, -500], [1000, 500]],\n        children: /*#__PURE__*/_jsxDEV(Geographies, {\n          geography: countryDataJson,\n          children: ({\n            geographies\n          }) => geographies.map(geo => {\n            const isSearched = geo.properties.name.toLowerCase() === selectedCountry.toLowerCase();\n            return /*#__PURE__*/_jsxDEV(Geography, {\n              geography: geo,\n              fill: isSearched ? \"#996cfb\" : \"#e0e0e0\",\n              stroke: \"#ffffff\",\n              style: {\n                default: {\n                  outline: \"none\"\n                },\n                hover: {\n                  fill: \"#a78bfa\",\n                  outline: \"none\"\n                },\n                pressed: {\n                  fill: \"#7243da\",\n                  outline: \"none\"\n                }\n              }\n            }, geo.rsmKey, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 23\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(WorldMap, \"YS0f+JwSas1hQxUugVrMJ0IxkSk=\");\n_c = WorldMap;\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["useState","useEffect","ComposableMap","Geographies","Geography","ZoomableGroup","geoCentroid","feature","jsxDEV","_jsxDEV","Fragment","_Fragment","WorldMap","_s","countryDataJson","setCountryDataJson","selectedCountry","setSelectedCountry","center","setCenter","zoom","setZoom","cont","setCountries","fetchCountryData","res","fetch","json","countries","objects","features","match","find","x","properties","name","toLowerCase","trim","nameString","map","el","join","console","log","children","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","projection","className","minZoom","maxZoom","translateExtent","geography","geographies","geo","isSearched","fill","stroke","style","default","outline","hover","pressed","rsmKey","_c","$RefreshReg$"],"sources":["C:/Users/nzhvania/Desktop/navigate-geography/src/Components/HelperComponents/WorldMap.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport {ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\r\nimport { geoCentroid } from \"d3-geo\"; \r\nimport { feature } from \"topojson-client\";\r\n\r\nimport '../ComponentStyles/worldmap.css';\r\n\r\nfunction WorldMap() {\r\n  const [countryDataJson, setCountryDataJson] = useState(null);\r\n  const [selectedCountry, setSelectedCountry] = useState('');\r\n  const [center, setCenter] = useState([0, 0]);\r\n  const [zoom, setZoom] = useState(1);\r\n  const [cont, setCountries] = useState(0);\r\n\r\n  useEffect(() => {\r\n    async function fetchCountryData() {\r\n      const res = await fetch(\"/CountriesView.json\");\r\n      const json = await res.json();\r\n      setCountryDataJson(json);\r\n    }\r\n\r\n    fetchCountryData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const countries = countryDataJson && feature(countryDataJson, countryDataJson.objects.countries).features;\r\n\r\n    if(countries) {\r\n      const match = countries.find(x => x.properties.name.toLowerCase() === selectedCountry.trim().toLowerCase());\r\n\r\n      const nameString = countries.map(el => el.properties.name).join(', ');\r\n      setCountries(nameString);\r\n\r\n      console.log(cont);\r\n\r\n      if(match) {\r\n        console.log(match);\r\n        setCenter(geoCentroid(match));\r\n        setZoom(2);\r\n      }\r\n      else {\r\n        setZoom(1);\r\n        setCenter([0, 0]);\r\n      }\r\n    }\r\n  }, [selectedCountry])\r\n\r\n  return (\r\n    countryDataJson && (\r\n      <>\r\n        <input value={selectedCountry} onChange={(e) => setSelectedCountry(e.target.value)} />\r\n        <ComposableMap\r\n          projection=\"geoMercator\"\r\n          className=\"map-container\"\r\n        >\r\n          <ZoomableGroup\r\n            zoom={zoom}\r\n            center={center}\r\n            minZoom={1}\r\n            maxZoom={8}\r\n            translateExtent={[[-1000, -500], [1000, 500]]}\r\n          >\r\n            <Geographies geography={countryDataJson}>\r\n              {({ geographies }) =>\r\n                geographies.map((geo) => {\r\n                  const isSearched = geo.properties.name.toLowerCase() === selectedCountry.toLowerCase();\r\n                  return (\r\n                      <Geography\r\n                        key={geo.rsmKey}\r\n                        geography={geo}\r\n                        fill={isSearched ? \"#996cfb\" : \"#e0e0e0\"}\r\n                        stroke=\"#ffffff\"\r\n                        style={{\r\n                          default: { outline: \"none\" },\r\n                          hover: { fill: \"#a78bfa\", outline: \"none\" },\r\n                          pressed: { fill: \"#7243da\", outline: \"none\" },\r\n                        }}\r\n                      />\r\n                  )})\r\n              }\r\n            </Geographies>\r\n          </ZoomableGroup>\r\n        </ComposableMap>\r\n        </>\r\n    )\r\n  );\r\n}\r\n\r\nexport default WorldMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}