{"ast":null,"code":"import{useState,useEffect}from\"react\";import{ComposableMap,Geographies,Geography,ZoomableGroup}from\"react-simple-maps\";import{geoCentroid}from\"d3-geo\";import{feature}from\"topojson-client\";import'../ComponentStyles/worldmap.css';import{area}from\"@turf/turf\";import{jsx as _jsx}from\"react/jsx-runtime\";function WorldMap(_ref){let{selectedCountries,isFullSize}=_ref;const[countryDataJson,setCountryDataJson]=useState(null);const[center,setCenter]=useState([0,0]);const[zoom,setZoom]=useState(1);useEffect(()=>{async function fetchCountryData(){const res=await fetch(\"/CountriesView.json\");const json=await res.json();setCountryDataJson(json);}fetchCountryData();},[]);useEffect(()=>{const countries=countryDataJson&&feature(countryDataJson,countryDataJson.objects.countries).features;if(countries&&selectedCountries&&selectedCountries.length===1&&!selectedCountries[0].multi_search){const match=countries.find(x=>x.properties.name.toLowerCase()===selectedCountries[0].name.trim().toLowerCase());if(match){const countryArea=area(match);const scale=countryArea/1000000;const zoom=Math.max(2.5,Math.min(7.5,9.5-Math.log10(scale)*0.85));setCenter(geoCentroid(match));setZoom(isFullSize?1:zoom);}else{setZoom(1);setCenter([0,0]);}}},[countryDataJson,selectedCountries,isFullSize]);return countryDataJson&&selectedCountries&&/*#__PURE__*/_jsx(ComposableMap,{projection:\"geoMercator\",className:\"map-container\",children:/*#__PURE__*/_jsx(ZoomableGroup,{zoom:zoom,center:center,minZoom:1,maxZoom:8,translateExtent:[[-1000,-500],[1000,500]],children:/*#__PURE__*/_jsx(Geographies,{geography:countryDataJson,children:_ref2=>{let{geographies}=_ref2;return geographies.map(geo=>{const isSearched=selectedCountries.some(country=>{return geo.properties.name.toLowerCase()===country.name.toLowerCase();});return/*#__PURE__*/_jsx(Geography,{geography:geo,onClick:e=>e.stopPropagation(),fill:isSearched?\"#6d635d\":\"#e0e0e0\",stroke:\"#ffffff\",style:{default:{outline:\"none\"},hover:{fill:\"#7A6E67\",outline:\"none\"},pressed:{fill:\"#6A5F58\",outline:\"none\"}}},geo.rsmKey);});}})})});}export default WorldMap;","map":{"version":3,"names":["useState","useEffect","ComposableMap","Geographies","Geography","ZoomableGroup","geoCentroid","feature","area","jsx","_jsx","WorldMap","_ref","selectedCountries","isFullSize","countryDataJson","setCountryDataJson","center","setCenter","zoom","setZoom","fetchCountryData","res","fetch","json","countries","objects","features","length","multi_search","match","find","x","properties","name","toLowerCase","trim","countryArea","scale","Math","max","min","log10","projection","className","children","minZoom","maxZoom","translateExtent","geography","_ref2","geographies","map","geo","isSearched","some","country","onClick","e","stopPropagation","fill","stroke","style","default","outline","hover","pressed","rsmKey"],"sources":["C:/Users/nzhvania/Desktop/navigate-geography/src/Components/HelperComponents/WorldMap.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport {ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\r\nimport { geoCentroid } from \"d3-geo\"; \r\nimport { feature } from \"topojson-client\";\r\n\r\nimport '../ComponentStyles/worldmap.css';\r\nimport { area } from \"@turf/turf\";\r\n\r\nfunction WorldMap({ selectedCountries, isFullSize }) {\r\n  const [countryDataJson, setCountryDataJson] = useState(null);\r\n  const [center, setCenter] = useState([0, 0]);\r\n  const [zoom, setZoom] = useState(1);\r\n\r\n  useEffect(() => {\r\n    async function fetchCountryData() {\r\n      const res = await fetch(\"/CountriesView.json\");\r\n      const json = await res.json();\r\n      setCountryDataJson(json);\r\n    }\r\n    fetchCountryData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const countries = countryDataJson && feature(countryDataJson, countryDataJson.objects.countries).features;\r\n    \r\n    if(countries && selectedCountries && selectedCountries.length === 1 && !selectedCountries[0].multi_search) {\r\n      const match = countries.find(x => x.properties.name.toLowerCase() === selectedCountries[0].name.trim().toLowerCase()); \r\n      \r\n      \r\n      if(match) {\r\n        const countryArea = area(match);\r\n        const scale = countryArea / 1_000_000;\r\n        \r\n        const zoom = Math.max(2.5, Math.min(7.5, 9.5 - Math.log10(scale) * 0.85));\r\n        \r\n\r\n        setCenter(geoCentroid(match));\r\n        setZoom(isFullSize ? 1 : zoom);\r\n      }\r\n      else {\r\n        setZoom(1);\r\n        setCenter([0, 0]);\r\n      }\r\n    }\r\n  }, [countryDataJson, selectedCountries, isFullSize])\r\n\r\n  return (\r\n    countryDataJson && selectedCountries && (\r\n      <ComposableMap\r\n        projection=\"geoMercator\"\r\n        className=\"map-container\"\r\n      >\r\n        <ZoomableGroup\r\n          zoom={zoom}\r\n          center={center}\r\n          minZoom={1}\r\n          maxZoom={8}\r\n          translateExtent={[[-1000, -500], [1000, 500]]}\r\n        >\r\n          <Geographies geography={countryDataJson}>\r\n            {({ geographies }) =>\r\n              geographies.map((geo) => { \r\n\r\n                const isSearched = selectedCountries.some(country => {\r\n                     return geo.properties.name.toLowerCase() === country.name.toLowerCase();\r\n                })\r\n\r\n                return (\r\n                    <Geography\r\n                      key={geo.rsmKey}\r\n                      geography={geo}\r\n                      onClick={(e) => e.stopPropagation()}\r\n                      fill={isSearched ? \"#6d635d\" : \"#e0e0e0\"}\r\n                      stroke=\"#ffffff\"\r\n                      style={{\r\n                        default: { outline: \"none\" },\r\n                        hover: { fill: \"#7A6E67\", outline: \"none\" },\r\n                        pressed: { fill: \"#6A5F58\", outline: \"none\" },\r\n                      }}\r\n                    />\r\n                )})\r\n            }\r\n          </Geographies>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    )\r\n  );\r\n}\r\n\r\nexport default WorldMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}