{"ast":null,"code":"// index.ts\nimport { distance } from \"@turf/distance\";\nimport { intersect } from \"@turf/intersect\";\nimport { polygon, featureCollection } from \"@turf/helpers\";\nfunction triangleGrid(bbox, cellSide) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var results = [];\n  var xFraction = cellSide / distance([bbox[0], bbox[1]], [bbox[2], bbox[1]], options);\n  var cellWidth = xFraction * (bbox[2] - bbox[0]);\n  var yFraction = cellSide / distance([bbox[0], bbox[1]], [bbox[0], bbox[3]], options);\n  var cellHeight = yFraction * (bbox[3] - bbox[1]);\n  var xi = 0;\n  var currentX = bbox[0];\n  while (currentX <= bbox[2]) {\n    var yi = 0;\n    var currentY = bbox[1];\n    while (currentY <= bbox[3]) {\n      var cellTriangle1 = null;\n      var cellTriangle2 = null;\n      if (xi % 2 === 0 && yi % 2 === 0) {\n        cellTriangle1 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], options.properties);\n        cellTriangle2 = polygon([[[currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY + cellHeight]]], options.properties);\n      } else if (xi % 2 === 0 && yi % 2 === 1) {\n        cellTriangle1 = polygon([[[currentX, currentY], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], options.properties);\n        cellTriangle2 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX, currentY]]], options.properties);\n      } else if (yi % 2 === 0 && xi % 2 === 1) {\n        cellTriangle1 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX, currentY]]], options.properties);\n        cellTriangle2 = polygon([[[currentX, currentY], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], options.properties);\n      } else if (yi % 2 === 1 && xi % 2 === 1) {\n        cellTriangle1 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], options.properties);\n        cellTriangle2 = polygon([[[currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY + cellHeight]]], options.properties);\n      }\n      if (options.mask) {\n        if (intersect(featureCollection([options.mask, cellTriangle1]))) results.push(cellTriangle1);\n        if (intersect(featureCollection([options.mask, cellTriangle2]))) results.push(cellTriangle2);\n      } else {\n        results.push(cellTriangle1);\n        results.push(cellTriangle2);\n      }\n      currentY += cellHeight;\n      yi++;\n    }\n    xi++;\n    currentX += cellWidth;\n  }\n  return featureCollection(results);\n}\nvar turf_triangle_grid_default = triangleGrid;\nexport { turf_triangle_grid_default as default, triangleGrid };","map":{"version":3,"names":["distance","intersect","polygon","featureCollection","triangleGrid","bbox","cellSide","options","arguments","length","undefined","results","xFraction","cellWidth","yFraction","cellHeight","xi","currentX","yi","currentY","cellTriangle1","cellTriangle2","properties","mask","push","turf_triangle_grid_default"],"sources":["C:\\Users\\nzhvania\\Desktop\\navigate-geography\\node_modules\\@turf\\triangle-grid\\index.ts"],"sourcesContent":["import {\n  BBox,\n  Feature,\n  Polygon,\n  FeatureCollection,\n  GeoJsonProperties,\n} from \"geojson\";\nimport { distance } from \"@turf/distance\";\nimport { intersect } from \"@turf/intersect\";\nimport { polygon, featureCollection, Units } from \"@turf/helpers\";\n\n/**\n * Creates a grid of triangular polygons.\n *\n * @function\n * @param {BBox} bbox extent of grid in [minX, minY, maxX, maxY] order\n * @param {number} cellSide dimension of each grid cell.  Two triangles are created in each cell.\n * @param {Object} [options={}] Optional parameters\n * @param {Units} [options.units='kilometers'] used in calculating cellSide.  Supports all valid Turf {@link https://github.com/Turfjs/turf/blob/master/packages/turf-helpers/README_UNITS.md Units}\n * @param {Feature<Polygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it\n * @param {Object} [options.properties={}] passed to each point of the grid\n * @returns {FeatureCollection<Polygon>} grid of polygons\n * @example\n * var bbox = [-95, 30 ,-85, 40];\n * var cellSide = 50;\n * var options = {units: 'miles'};\n *\n * var triangleGrid = turf.triangleGrid(bbox, cellSide, options);\n *\n * //addToMap\n * var addToMap = [triangleGrid];\n */\nfunction triangleGrid<P extends GeoJsonProperties = GeoJsonProperties>(\n  bbox: BBox,\n  cellSide: number,\n  options: {\n    units?: Units;\n    properties?: P;\n    mask?: Feature<Polygon>;\n  } = {}\n): FeatureCollection<Polygon, P> {\n  // Containers\n  var results: Feature<Polygon, P>[] = [];\n\n  // Input Validation is being handled by Typescript\n\n  // if (cellSide === null || cellSide === undefined) throw new Error('cellSide is required');\n  // if (!isNumber(cellSide)) throw new Error('cellSide is invalid');\n  // if (!bbox) throw new Error('bbox is required');\n  // if (!Array.isArray(bbox)) throw new Error('bbox must be array');\n  // if (bbox.length !== 4) throw new Error('bbox must contain 4 numbers');\n  // if (mask && ['Polygon', 'MultiPolygon'].indexOf(getType(mask)) === -1) throw new Error('options.mask must be a (Multi)Polygon');\n\n  // Main\n  var xFraction =\n    cellSide / distance([bbox[0], bbox[1]], [bbox[2], bbox[1]], options);\n  var cellWidth = xFraction * (bbox[2] - bbox[0]);\n  var yFraction =\n    cellSide / distance([bbox[0], bbox[1]], [bbox[0], bbox[3]], options);\n  var cellHeight = yFraction * (bbox[3] - bbox[1]);\n\n  var xi = 0;\n  var currentX = bbox[0];\n  while (currentX <= bbox[2]) {\n    var yi = 0;\n    var currentY = bbox[1];\n    while (currentY <= bbox[3]) {\n      var cellTriangle1 = null;\n      var cellTriangle2 = null;\n\n      if (xi % 2 === 0 && yi % 2 === 0) {\n        cellTriangle1 = polygon(\n          [\n            [\n              [currentX, currentY],\n              [currentX, currentY + cellHeight],\n              [currentX + cellWidth, currentY],\n              [currentX, currentY],\n            ],\n          ],\n          options.properties\n        );\n        cellTriangle2 = polygon(\n          [\n            [\n              [currentX, currentY + cellHeight],\n              [currentX + cellWidth, currentY + cellHeight],\n              [currentX + cellWidth, currentY],\n              [currentX, currentY + cellHeight],\n            ],\n          ],\n          options.properties\n        );\n      } else if (xi % 2 === 0 && yi % 2 === 1) {\n        cellTriangle1 = polygon(\n          [\n            [\n              [currentX, currentY],\n              [currentX + cellWidth, currentY + cellHeight],\n              [currentX + cellWidth, currentY],\n              [currentX, currentY],\n            ],\n          ],\n          options.properties\n        );\n        cellTriangle2 = polygon(\n          [\n            [\n              [currentX, currentY],\n              [currentX, currentY + cellHeight],\n              [currentX + cellWidth, currentY + cellHeight],\n              [currentX, currentY],\n            ],\n          ],\n          options.properties\n        );\n      } else if (yi % 2 === 0 && xi % 2 === 1) {\n        cellTriangle1 = polygon(\n          [\n            [\n              [currentX, currentY],\n              [currentX, currentY + cellHeight],\n              [currentX + cellWidth, currentY + cellHeight],\n              [currentX, currentY],\n            ],\n          ],\n          options.properties\n        );\n        cellTriangle2 = polygon(\n          [\n            [\n              [currentX, currentY],\n              [currentX + cellWidth, currentY + cellHeight],\n              [currentX + cellWidth, currentY],\n              [currentX, currentY],\n            ],\n          ],\n          options.properties\n        );\n      } else if (yi % 2 === 1 && xi % 2 === 1) {\n        cellTriangle1 = polygon(\n          [\n            [\n              [currentX, currentY],\n              [currentX, currentY + cellHeight],\n              [currentX + cellWidth, currentY],\n              [currentX, currentY],\n            ],\n          ],\n          options.properties\n        );\n        cellTriangle2 = polygon(\n          [\n            [\n              [currentX, currentY + cellHeight],\n              [currentX + cellWidth, currentY + cellHeight],\n              [currentX + cellWidth, currentY],\n              [currentX, currentY + cellHeight],\n            ],\n          ],\n          options.properties\n        );\n      }\n      if (options.mask) {\n        if (intersect(featureCollection([options.mask, cellTriangle1!])))\n          results.push(cellTriangle1!);\n        if (intersect(featureCollection([options.mask, cellTriangle2!])))\n          results.push(cellTriangle2!);\n      } else {\n        results.push(cellTriangle1!);\n        results.push(cellTriangle2!);\n      }\n\n      currentY += cellHeight;\n      yi++;\n    }\n    xi++;\n    currentX += cellWidth;\n  }\n  return featureCollection(results);\n}\n\nexport { triangleGrid };\nexport default triangleGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}