{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nzhvania\\\\Desktop\\\\navigate-geography\\\\src\\\\Components\\\\HelperComponents\\\\WorldMap.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\nimport { geoCentroid } from \"d3-geo\";\nimport { feature } from \"topojson-client\";\nimport '../ComponentStyles/worldmap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WorldMap() {\n  _s();\n  const [countryDataJson, setCountryDataJson] = useState(null);\n  const [selectedCountry, setSelectedCountry] = useState('');\n  const [center, setCenter] = useState([0, 0]);\n  const [zoom, setZoom] = useState(1);\n  const [cont, setCountries] = useState(\"\");\n  useEffect(() => {\n    async function fetchCountryData() {\n      const res = await fetch(\"/CountriesView.json\");\n      const json = await res.json();\n      setCountryDataJson(json);\n    }\n    fetchCountryData();\n  }, []);\n  useEffect(() => {\n    const countries = countryDataJson && feature(countryDataJson, countryDataJson.objects.countries).features;\n    if (countries) {\n      const match = countries.find(x => x.properties.name.toLowerCase() === selectedCountry.trim().toLowerCase());\n      const nameList = countries.map(el => el.properties.name).join('\\n');\n      setCountries(nameList);\n      console.log(cont);\n      if (match) {\n        setCenter(geoCentroid(match));\n        setZoom(2);\n      } else {\n        setZoom(1);\n        setCenter([0, 0]);\n      }\n    }\n  }, [selectedCountry]);\n  return countryDataJson && /*#__PURE__*/_jsxDEV(Map, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 7\n  }, this);\n}\n_s(WorldMap, \"2Yz7IpBKJ8bUsMMa9ZFMxwP9df0=\");\n_c = WorldMap;\nconst Map = () => {\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    projection: \"geoMercator\",\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n      zoom: zoom,\n      center: center,\n      minZoom: 1,\n      maxZoom: 8,\n      translateExtent: [[-1000, -500], [1000, 500]],\n      children: /*#__PURE__*/_jsxDEV(Geographies, {\n        geography: countryDataJson,\n        children: ({\n          geographies\n        }) => geographies.map(geo => {\n          const isSearched = geo.properties.name.toLowerCase() === selectedCountry.toLowerCase();\n          return /*#__PURE__*/_jsxDEV(Geography, {\n            geography: geo,\n            fill: isSearched ? \"#996cfb\" : \"#e0e0e0\",\n            stroke: \"#ffffff\",\n            style: {\n              default: {\n                outline: \"none\"\n              },\n              hover: {\n                fill: \"#a78bfa\",\n                outline: \"none\"\n              },\n              pressed: {\n                fill: \"#7243da\",\n                outline: \"none\"\n              }\n            }\n          }, geo.rsmKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Map;\nexport default WorldMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"WorldMap\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["useState","useEffect","ComposableMap","Geographies","Geography","ZoomableGroup","geoCentroid","feature","jsxDEV","_jsxDEV","WorldMap","_s","countryDataJson","setCountryDataJson","selectedCountry","setSelectedCountry","center","setCenter","zoom","setZoom","cont","setCountries","fetchCountryData","res","fetch","json","countries","objects","features","match","find","x","properties","name","toLowerCase","trim","nameList","map","el","join","console","log","Map","fileName","_jsxFileName","lineNumber","columnNumber","_c","projection","className","children","minZoom","maxZoom","translateExtent","geography","geographies","geo","isSearched","fill","stroke","style","default","outline","hover","pressed","rsmKey","_c2","$RefreshReg$"],"sources":["C:/Users/nzhvania/Desktop/navigate-geography/src/Components/HelperComponents/WorldMap.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport {ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\r\nimport { geoCentroid } from \"d3-geo\"; \r\nimport { feature } from \"topojson-client\";\r\n\r\nimport '../ComponentStyles/worldmap.css';\r\n\r\nfunction WorldMap() {\r\n  const [countryDataJson, setCountryDataJson] = useState(null);\r\n  const [selectedCountry, setSelectedCountry] = useState('');\r\n  const [center, setCenter] = useState([0, 0]);\r\n  const [zoom, setZoom] = useState(1);\r\n  const [cont, setCountries] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetchCountryData() {\r\n      const res = await fetch(\"/CountriesView.json\");\r\n      const json = await res.json();\r\n      setCountryDataJson(json);\r\n    }\r\n\r\n    fetchCountryData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const countries = countryDataJson && feature(countryDataJson, countryDataJson.objects.countries).features;\r\n\r\n    if(countries) {\r\n      const match = countries.find(x => x.properties.name.toLowerCase() === selectedCountry.trim().toLowerCase());\r\n\r\n      const nameList = countries.map(el => el.properties.name).join('\\n');\r\n      setCountries(nameList);\r\n\r\n      console.log(cont);\r\n\r\n      if(match) {\r\n        setCenter(geoCentroid(match));\r\n        setZoom(2);\r\n      }\r\n      else {\r\n        setZoom(1);\r\n        setCenter([0, 0]);\r\n      }\r\n    }\r\n  }, [selectedCountry])\r\n\r\n  return (\r\n    countryDataJson && \r\n      <Map />\r\n  );\r\n}\r\n\r\n\r\nconst Map = () => {\r\n  return (\r\n    <ComposableMap\r\n    projection=\"geoMercator\"\r\n    className=\"map-container\"\r\n  >\r\n    <ZoomableGroup\r\n      zoom={zoom}\r\n      center={center}\r\n      minZoom={1}\r\n      maxZoom={8}\r\n      translateExtent={[[-1000, -500], [1000, 500]]}\r\n    >\r\n      <Geographies geography={countryDataJson}>\r\n        {({ geographies }) =>\r\n          geographies.map((geo) => {\r\n            const isSearched = geo.properties.name.toLowerCase() === selectedCountry.toLowerCase();\r\n            return (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  fill={isSearched ? \"#996cfb\" : \"#e0e0e0\"}\r\n                  stroke=\"#ffffff\"\r\n                  style={{\r\n                    default: { outline: \"none\" },\r\n                    hover: { fill: \"#a78bfa\", outline: \"none\" },\r\n                    pressed: { fill: \"#7243da\", outline: \"none\" },\r\n                  }}\r\n                />\r\n            )})\r\n        }\r\n      </Geographies>\r\n    </ZoomableGroup>\r\n  </ComposableMap>\r\n  )\r\n} \r\n\r\nexport default WorldMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}