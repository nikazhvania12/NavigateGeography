{"ast":null,"code":"import PackageJSON from '../../../package.json';\nasync function GetCountriesFilter(SetError, name, waterSupplyFrom, resourcesFrom, populationFrom, waterSupplyTo, resourcesTo, populationTo) {\n  const model = {\n    name,\n    waterSupplyFrom,\n    resourcesFrom,\n    populationFrom,\n    waterSupplyTo,\n    resourcesTo,\n    populationTo\n  };\n  const json = JSON.stringify(model);\n  var url = '';\n  if (PackageJSON.API.DebugMode) url = PackageJSON.API.BaseURLDebug + PackageJSON.API.GetCountriesFilter;else url = PackageJSON.API.BaseURLProd + PackageJSON.API.GetCountriesFilter;\n  console.log(url);\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: json\n    });\n    const jsonResp = await response.json();\n    if (response.status === 400 && jsonResp !== null && jsonResp.Error !== null) {\n      SetError(jsonResp.Error);\n    }\n    if (!response.ok) return [];\n    return jsonResp;\n  } catch (e) {\n    return [];\n  }\n}\n_c = GetCountriesFilter;\nexport default GetCountriesFilter;\nvar _c;\n$RefreshReg$(_c, \"GetCountriesFilter\");","map":{"version":3,"names":["PackageJSON","GetCountriesFilter","SetError","name","waterSupplyFrom","resourcesFrom","populationFrom","waterSupplyTo","resourcesTo","populationTo","model","json","JSON","stringify","url","API","DebugMode","BaseURLDebug","BaseURLProd","console","log","response","fetch","method","headers","body","jsonResp","status","Error","ok","e","_c","$RefreshReg$"],"sources":["C:/Users/nzhvania/Desktop/navigate-geography/src/Controllers/Countries/GetCountriesFilter.jsx"],"sourcesContent":["import PackageJSON from '../../../package.json'\r\n\r\nasync function GetCountriesFilter(SetError, name, waterSupplyFrom, resourcesFrom, populationFrom, waterSupplyTo, resourcesTo, populationTo) {\r\n\r\n    const model = {\r\n        name,\r\n        waterSupplyFrom,\r\n        resourcesFrom,\r\n        populationFrom,\r\n        waterSupplyTo,\r\n        resourcesTo,\r\n        populationTo\r\n    }\r\n\r\n    const json = JSON.stringify(model);\r\n\r\n    var url = '';\r\n    if(PackageJSON.API.DebugMode)\r\n        url = PackageJSON.API.BaseURLDebug + PackageJSON.API.GetCountriesFilter;\r\n    else \r\n        url = PackageJSON.API.BaseURLProd + PackageJSON.API.GetCountriesFilter;\r\n\r\n    console.log(url);\r\n\r\n\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: json\r\n        })\r\n\r\n        const jsonResp = await response.json();\r\n\r\n        if(response.status === 400 && jsonResp !== null && jsonResp.Error !== null) {\r\n            SetError(jsonResp.Error)\r\n        }\r\n    \r\n        if(!response.ok) \r\n            return [];\r\n    \r\n        return jsonResp;\r\n    }\r\n    catch(e) {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default GetCountriesFilter;"],"mappings":"AAAA,OAAOA,WAAW,MAAM,uBAAuB;AAE/C,eAAeC,kBAAkBA,CAACC,QAAQ,EAAEC,IAAI,EAAEC,eAAe,EAAEC,aAAa,EAAEC,cAAc,EAAEC,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAE;EAExI,MAAMC,KAAK,GAAG;IACVP,IAAI;IACJC,eAAe;IACfC,aAAa;IACbC,cAAc;IACdC,aAAa;IACbC,WAAW;IACXC;EACJ,CAAC;EAED,MAAME,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC;EAElC,IAAII,GAAG,GAAG,EAAE;EACZ,IAAGd,WAAW,CAACe,GAAG,CAACC,SAAS,EACxBF,GAAG,GAAGd,WAAW,CAACe,GAAG,CAACE,YAAY,GAAGjB,WAAW,CAACe,GAAG,CAACd,kBAAkB,CAAC,KAExEa,GAAG,GAAGd,WAAW,CAACe,GAAG,CAACG,WAAW,GAAGlB,WAAW,CAACe,GAAG,CAACd,kBAAkB;EAE1EkB,OAAO,CAACC,GAAG,CAACN,GAAG,CAAC;EAGhB,IAAI;IACA,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACR,GAAG,EAAE;MAC9BS,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEd;IACV,CAAC,CAAC;IAEF,MAAMe,QAAQ,GAAG,MAAML,QAAQ,CAACV,IAAI,CAAC,CAAC;IAEtC,IAAGU,QAAQ,CAACM,MAAM,KAAK,GAAG,IAAID,QAAQ,KAAK,IAAI,IAAIA,QAAQ,CAACE,KAAK,KAAK,IAAI,EAAE;MACxE1B,QAAQ,CAACwB,QAAQ,CAACE,KAAK,CAAC;IAC5B;IAEA,IAAG,CAACP,QAAQ,CAACQ,EAAE,EACX,OAAO,EAAE;IAEb,OAAOH,QAAQ;EACnB,CAAC,CACD,OAAMI,CAAC,EAAE;IACL,OAAO,EAAE;EACb;AACJ;AAACC,EAAA,GA9Cc9B,kBAAkB;AAgDjC,eAAeA,kBAAkB;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}