{"ast":null,"code":"// import { useState, useEffect } from \"react\";\n// import {ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\n// import { geoCentroid } from \"d3-geo\"; \n// import { feature } from \"topojson-client\";\n\n// import '../ComponentStyles/worldmap.css';\n\n// function WorldMap() {\n//   const [countryDataJson, setCountryDataJson] = useState(null);\n//   const [selectedCountry, setSelectedCountry] = useState('');\n//   const [center, setCenter] = useState([0, 0]);\n//   const [zoom, setZoom] = useState(1);\n\n//   useEffect(() => {\n//     async function fetchCountryData() {\n//       const res = await fetch(\"/CountriesView.json\");\n//       const json = await res.json();\n//       setCountryDataJson(json);\n//     }\n\n//     fetchCountryData();\n//   }, []);\n\n//   useEffect(() => {\n//     const countries = countryDataJson && feature(countryDataJson, countryDataJson.objects.countries).features;\n\n//     if(countries) {\n//       const match = countries.find(x => x.properties.name.toLowerCase() === selectedCountry.trim().toLowerCase());\n\n//       if(match) {\n//         console.log(match);\n//         setCenter(geoCentroid(match));\n//         setZoom(2);\n//       }\n//       else {\n//         setZoom(1);\n//         setCenter([0, 0]);\n//       }\n//     }\n//   }, [selectedCountry])\n\n//   return (\n//     countryDataJson && (\n//       <>\n//         <input value={selectedCountry} onChange={(e) => setSelectedCountry(e.target.value)} />\n//         <ComposableMap\n//           projection=\"geoMercator\"\n//           className=\"map-container\"\n//         >\n//           <ZoomableGroup\n//             zoom={zoom}\n//             center={center}\n//             minZoom={1}\n//             maxZoom={8}\n//             translateExtent={[[-1000, -500], [1000, 500]]}\n//           >\n//             <Geographies geography={countryDataJson}>\n//               {({ geographies }) =>\n//                 geographies.map((geo) => {\n//                   const isSearched = geo.properties.name.toLowerCase() === selectedCountry.toLowerCase();\n//                   return (\n//                       <Geography\n//                         key={geo.rsmKey}\n//                         geography={geo}\n//                         fill={isSearched ? \"#996cfb\" : \"#e0e0e0\"}\n//                         stroke=\"#ffffff\"\n//                         style={{\n//                           default: { outline: \"none\" },\n//                           hover: { fill: \"#a78bfa\", outline: \"none\" },\n//                           pressed: { fill: \"#7243da\", outline: \"none\" },\n//                         }}\n//                       />\n//                   )})\n//               }\n//             </Geographies>\n//           </ZoomableGroup>\n//         </ComposableMap>\n//         </>\n//     )\n//   );\n// }\n\n// export default WorldMap;","map":{"version":3,"names":[],"sources":["C:/Users/nzhvania/Desktop/navigate-geography/src/Components/HelperComponents/WorldMap.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\r\n// import {ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\r\n// import { geoCentroid } from \"d3-geo\"; \r\n// import { feature } from \"topojson-client\";\r\n\r\n// import '../ComponentStyles/worldmap.css';\r\n\r\n// function WorldMap() {\r\n//   const [countryDataJson, setCountryDataJson] = useState(null);\r\n//   const [selectedCountry, setSelectedCountry] = useState('');\r\n//   const [center, setCenter] = useState([0, 0]);\r\n//   const [zoom, setZoom] = useState(1);\r\n\r\n//   useEffect(() => {\r\n//     async function fetchCountryData() {\r\n//       const res = await fetch(\"/CountriesView.json\");\r\n//       const json = await res.json();\r\n//       setCountryDataJson(json);\r\n//     }\r\n\r\n//     fetchCountryData();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const countries = countryDataJson && feature(countryDataJson, countryDataJson.objects.countries).features;\r\n\r\n//     if(countries) {\r\n//       const match = countries.find(x => x.properties.name.toLowerCase() === selectedCountry.trim().toLowerCase());\r\n\r\n      \r\n//       if(match) {\r\n//         console.log(match);\r\n//         setCenter(geoCentroid(match));\r\n//         setZoom(2);\r\n//       }\r\n//       else {\r\n//         setZoom(1);\r\n//         setCenter([0, 0]);\r\n//       }\r\n//     }\r\n//   }, [selectedCountry])\r\n\r\n//   return (\r\n//     countryDataJson && (\r\n//       <>\r\n//         <input value={selectedCountry} onChange={(e) => setSelectedCountry(e.target.value)} />\r\n//         <ComposableMap\r\n//           projection=\"geoMercator\"\r\n//           className=\"map-container\"\r\n//         >\r\n//           <ZoomableGroup\r\n//             zoom={zoom}\r\n//             center={center}\r\n//             minZoom={1}\r\n//             maxZoom={8}\r\n//             translateExtent={[[-1000, -500], [1000, 500]]}\r\n//           >\r\n//             <Geographies geography={countryDataJson}>\r\n//               {({ geographies }) =>\r\n//                 geographies.map((geo) => {\r\n//                   const isSearched = geo.properties.name.toLowerCase() === selectedCountry.toLowerCase();\r\n//                   return (\r\n//                       <Geography\r\n//                         key={geo.rsmKey}\r\n//                         geography={geo}\r\n//                         fill={isSearched ? \"#996cfb\" : \"#e0e0e0\"}\r\n//                         stroke=\"#ffffff\"\r\n//                         style={{\r\n//                           default: { outline: \"none\" },\r\n//                           hover: { fill: \"#a78bfa\", outline: \"none\" },\r\n//                           pressed: { fill: \"#7243da\", outline: \"none\" },\r\n//                         }}\r\n//                       />\r\n//                   )})\r\n//               }\r\n//             </Geographies>\r\n//           </ZoomableGroup>\r\n//         </ComposableMap>\r\n//         </>\r\n//     )\r\n//   );\r\n// }\r\n\r\n// export default WorldMap;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}