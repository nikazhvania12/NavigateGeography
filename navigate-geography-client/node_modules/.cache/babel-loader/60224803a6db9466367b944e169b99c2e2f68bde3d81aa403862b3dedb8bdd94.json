{"ast":null,"code":"import PackageJSON from '../../../package.json';\nasync function UpdateCountry(country, SetError) {\n  var url = '';\n  if (PackageJSON.API.DebugMode) url = PackageJSON.API.BaseURLDebug + PackageJSON.API.UpdateCountry;else url = PackageJSON.API.BaseURLProd + PackageJSON.API.UpdateCountry;\n  const jsonData = JSON.stringify(country);\n  try {\n    const resp = await fetch(url, {\n      method: \"PUT\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      body: jsonData\n    });\n    const jsonResp = await resp.json();\n    if (resp.status === 400 && jsonResp !== null && jsonResp.Error !== null) {\n      SetError(jsonResp.Error);\n    }\n    if (!resp.ok) return false;\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n_c = UpdateCountry;\nexport default UpdateCountry;\nvar _c;\n$RefreshReg$(_c, \"UpdateCountry\");","map":{"version":3,"names":["PackageJSON","UpdateCountry","country","SetError","url","API","DebugMode","BaseURLDebug","BaseURLProd","jsonData","JSON","stringify","resp","fetch","method","headers","credentials","body","jsonResp","json","status","Error","ok","e","_c","$RefreshReg$"],"sources":["C:/Users/nzhvania/Desktop/navigate-geography/src/Controllers/Countries/UpdateCountry.jsx"],"sourcesContent":["import PackageJSON from '../../../package.json';\r\n\r\nasync function UpdateCountry(country, SetError) {\r\n    var url = '';\r\n    if(PackageJSON.API.DebugMode)\r\n        url = PackageJSON.API.BaseURLDebug + PackageJSON.API.UpdateCountry;\r\n    else \r\n        url = PackageJSON.API.BaseURLProd + PackageJSON.API.UpdateCountry;\r\n\r\n    const jsonData = JSON.stringify(country);\r\n\r\n    try {\r\n        const resp = await fetch(url, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            credentials: 'include',\r\n            body: jsonData\r\n        })\r\n    \r\n        const jsonResp = await resp.json();\r\n    \r\n        if(resp.status === 400 && jsonResp !== null && jsonResp.Error !== null) {\r\n            SetError(jsonResp.Error);\r\n        }\r\n    \r\n        if(!resp.ok) \r\n            return false;\r\n    \r\n        return true;\r\n    }\r\n    catch(e) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default UpdateCountry;"],"mappings":"AAAA,OAAOA,WAAW,MAAM,uBAAuB;AAE/C,eAAeC,aAAaA,CAACC,OAAO,EAAEC,QAAQ,EAAE;EAC5C,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAGJ,WAAW,CAACK,GAAG,CAACC,SAAS,EACxBF,GAAG,GAAGJ,WAAW,CAACK,GAAG,CAACE,YAAY,GAAGP,WAAW,CAACK,GAAG,CAACJ,aAAa,CAAC,KAEnEG,GAAG,GAAGJ,WAAW,CAACK,GAAG,CAACG,WAAW,GAAGR,WAAW,CAACK,GAAG,CAACJ,aAAa;EAErE,MAAMQ,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAACT,OAAO,CAAC;EAExC,IAAI;IACA,MAAMU,IAAI,GAAG,MAAMC,KAAK,CAACT,GAAG,EAAE;MAC1BU,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,WAAW,EAAE,SAAS;MACtBC,IAAI,EAAER;IACV,CAAC,CAAC;IAEF,MAAMS,QAAQ,GAAG,MAAMN,IAAI,CAACO,IAAI,CAAC,CAAC;IAElC,IAAGP,IAAI,CAACQ,MAAM,KAAK,GAAG,IAAIF,QAAQ,KAAK,IAAI,IAAIA,QAAQ,CAACG,KAAK,KAAK,IAAI,EAAE;MACpElB,QAAQ,CAACe,QAAQ,CAACG,KAAK,CAAC;IAC5B;IAEA,IAAG,CAACT,IAAI,CAACU,EAAE,EACP,OAAO,KAAK;IAEhB,OAAO,IAAI;EACf,CAAC,CACD,OAAMC,CAAC,EAAE;IACL,OAAO,KAAK;EAChB;AACJ;AAACC,EAAA,GAjCcvB,aAAa;AAmC5B,eAAeA,aAAa;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}