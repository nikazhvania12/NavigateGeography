{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nzhvania\\\\Desktop\\\\navigate-geography\\\\src\\\\Components\\\\HelperComponents\\\\FitlerCountryDropdown.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport GetCountriesFilter from \"../../Controllers/Countries/GetCountriesFilter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FilterCountryDropdown({\n  isVisible,\n  filterCountryName\n}) {\n  _s();\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  useEffect(() => {\n    const fetchCountries = async () => {\n      if (filterCountryName !== '') {\n        const countries = await GetCountriesFilter(filterCountryName);\n        setSelectedCountries(countries);\n      }\n    };\n    fetchCountries();\n  }, [filterCountryName]);\n  useEffect(() => {\n    console.log(selectedCountries);\n  }, [selectedCountries]);\n  return isVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"filter-dropdown\",\n    children: selectedCountries && selectedCountries.map((country, index) => {\n      {\n        console.log(country);\n      }\n      /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-country\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: country.flag_path,\n          className: \"dropdown-flag\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this), \"\\u00A0\", /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: country.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 13\n  }, this);\n}\n_s(FilterCountryDropdown, \"FSW+4KOtvr7FS+6SCpQQgUj42Ik=\");\n_c = FilterCountryDropdown;\nexport default FilterCountryDropdown;\nvar _c;\n$RefreshReg$(_c, \"FilterCountryDropdown\");","map":{"version":3,"names":["useEffect","useState","GetCountriesFilter","jsxDEV","_jsxDEV","FilterCountryDropdown","isVisible","filterCountryName","_s","selectedCountries","setSelectedCountries","fetchCountries","countries","console","log","className","children","map","country","index","src","flag_path","fileName","_jsxFileName","lineNumber","columnNumber","name","_c","$RefreshReg$"],"sources":["C:/Users/nzhvania/Desktop/navigate-geography/src/Components/HelperComponents/FitlerCountryDropdown.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\"\r\nimport GetCountriesFilter from \"../../Controllers/Countries/GetCountriesFilter\"\r\n\r\n\r\nfunction FilterCountryDropdown({isVisible, filterCountryName}) {\r\n\r\n    const [selectedCountries, setSelectedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchCountries = async () => {\r\n\r\n            if(filterCountryName !== '') {\r\n                const countries = await GetCountriesFilter(filterCountryName);\r\n                setSelectedCountries(countries);\r\n            }\r\n        };\r\n      \r\n        fetchCountries();\r\n      }, [filterCountryName]);\r\n\r\n      useEffect(() => {console.log(selectedCountries)}, [selectedCountries]);\r\n\r\n\r\n    return (\r\n        isVisible &&\r\n            <div className=\"filter-dropdown\">\r\n                {selectedCountries && selectedCountries.map((country, index) => {\r\n                {console.log(country)}\r\n                <div className=\"dropdown-country\" key={index}>\r\n                    <img src={country.flag_path} className=\"dropdown-flag\" />\r\n                    {\"\\u00A0\"}\r\n                    <h5>{country.name}</h5>\r\n                </div>\r\n                })}\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default FilterCountryDropdown;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,kBAAkB,MAAM,gDAAgD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAG/E,SAASC,qBAAqBA,CAAC;EAACC,SAAS;EAAEC;AAAiB,CAAC,EAAE;EAAAC,EAAA;EAE3D,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE9DD,SAAS,CAAC,MAAM;IACZ,MAAMW,cAAc,GAAG,MAAAA,CAAA,KAAY;MAE/B,IAAGJ,iBAAiB,KAAK,EAAE,EAAE;QACzB,MAAMK,SAAS,GAAG,MAAMV,kBAAkB,CAACK,iBAAiB,CAAC;QAC7DG,oBAAoB,CAACE,SAAS,CAAC;MACnC;IACJ,CAAC;IAEDD,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACJ,iBAAiB,CAAC,CAAC;EAEvBP,SAAS,CAAC,MAAM;IAACa,OAAO,CAACC,GAAG,CAACL,iBAAiB,CAAC;EAAA,CAAC,EAAE,CAACA,iBAAiB,CAAC,CAAC;EAGxE,OACIH,SAAS,iBACLF,OAAA;IAAKW,SAAS,EAAC,iBAAiB;IAAAC,QAAA,EAC3BP,iBAAiB,IAAIA,iBAAiB,CAACQ,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;MAChE;QAACN,OAAO,CAACC,GAAG,CAACI,OAAO,CAAC;MAAA;MACrB,aAAAd,OAAA;QAAKW,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC7BZ,OAAA;UAAKgB,GAAG,EAAEF,OAAO,CAACG,SAAU;UAACN,SAAS,EAAC;QAAe;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EACxD,QAAQ,eACTrB,OAAA;UAAAY,QAAA,EAAKE,OAAO,CAACQ;QAAI;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA,GAHYN,KAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIvC,CAAC;IACN,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAElB;AAACjB,EAAA,CAhCQH,qBAAqB;AAAAsB,EAAA,GAArBtB,qBAAqB;AAkC9B,eAAeA,qBAAqB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}