{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nzhvania\\\\Desktop\\\\navigate-geography\\\\src\\\\Components\\\\HelperComponents\\\\WorldMap.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\nimport { geoCentroid } from \"d3-geo\";\nimport { feature } from \"topojson-client\";\nimport '../ComponentStyles/worldmap.css';\nimport { area } from \"@turf/turf\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WorldMap({\n  selectedCountries,\n  isFullSize\n}) {\n  _s();\n  const [countryDataJson, setCountryDataJson] = useState(null);\n  const [center, setCenter] = useState([0, 0]);\n  const [zoom, setZoom] = useState(1);\n  const RUSSIA_AREA = 10346150649800;\n  useEffect(() => {\n    async function fetchCountryData() {\n      const res = await fetch(\"/CountriesView.json\");\n      const json = await res.json();\n      setCountryDataJson(json);\n    }\n    fetchCountryData();\n  }, []);\n  useEffect(() => {\n    const countries = countryDataJson && feature(countryDataJson, countryDataJson.objects.countries).features;\n    if (countries && selectedCountries && selectedCountries.length === 1) {\n      const match = countries.find(x => x.properties.name.toLowerCase() === selectedCountries[0].name.trim().toLowerCase());\n      if (match) {\n        const countryArea = area(match);\n        const scale = countryArea / 1000000;\n        const zoom = Math.max(2.5, Math.min(7.5, 9.5 - Math.log10(scale) * 0.85));\n        setCenter(geoCentroid(match));\n        console.log(zoom);\n        setZoom(isFullSize ? 1 : zoom);\n      } else {\n        setZoom(1);\n        setCenter([0, 0]);\n      }\n    }\n  }, [countryDataJson, selectedCountries]);\n  return countryDataJson && selectedCountries && /*#__PURE__*/_jsxDEV(ComposableMap, {\n    projection: \"geoMercator\",\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n      zoom: zoom,\n      center: center,\n      minZoom: 1,\n      maxZoom: 8,\n      translateExtent: [[-1000, -500], [1000, 500]],\n      children: /*#__PURE__*/_jsxDEV(Geographies, {\n        geography: countryDataJson,\n        children: ({\n          geographies\n        }) => geographies.map(geo => {\n          var isSearched = false;\n          selectedCountries.map(country => {\n            console.log(country);\n            isSearched = geo.properties.name.toLowerCase() === country.name.toLowerCase();\n          });\n          return /*#__PURE__*/_jsxDEV(Geography, {\n            geography: geo,\n            fill: isSearched ? \"#996cfb\" : \"#e0e0e0\",\n            stroke: \"#ffffff\",\n            style: {\n              default: {\n                outline: \"none\"\n              },\n              hover: {\n                fill: \"#a78bfa\",\n                outline: \"none\"\n              },\n              pressed: {\n                fill: \"#7243da\",\n                outline: \"none\"\n              }\n            }\n          }, geo.rsmKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 7\n  }, this);\n}\n_s(WorldMap, \"Mm8+mKn2qTRCLOf2Nic1+1mLK2Y=\");\n_c = WorldMap;\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["useState","useEffect","ComposableMap","Geographies","Geography","ZoomableGroup","geoCentroid","feature","area","jsxDEV","_jsxDEV","WorldMap","selectedCountries","isFullSize","_s","countryDataJson","setCountryDataJson","center","setCenter","zoom","setZoom","RUSSIA_AREA","fetchCountryData","res","fetch","json","countries","objects","features","length","match","find","x","properties","name","toLowerCase","trim","countryArea","scale","Math","max","min","log10","console","log","projection","className","children","minZoom","maxZoom","translateExtent","geography","geographies","map","geo","isSearched","country","fill","stroke","style","default","outline","hover","pressed","rsmKey","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nzhvania/Desktop/navigate-geography/src/Components/HelperComponents/WorldMap.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport {ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\r\nimport { geoCentroid } from \"d3-geo\"; \r\nimport { feature } from \"topojson-client\";\r\n\r\nimport '../ComponentStyles/worldmap.css';\r\nimport { area } from \"@turf/turf\";\r\n\r\nfunction WorldMap({ selectedCountries, isFullSize }) {\r\n  const [countryDataJson, setCountryDataJson] = useState(null);\r\n  const [center, setCenter] = useState([0, 0]);\r\n  const [zoom, setZoom] = useState(1);\r\n  const RUSSIA_AREA = 10346150649800;\r\n\r\n  useEffect(() => {\r\n    async function fetchCountryData() {\r\n      const res = await fetch(\"/CountriesView.json\");\r\n      const json = await res.json();\r\n      setCountryDataJson(json);\r\n    }\r\n    fetchCountryData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const countries = countryDataJson && feature(countryDataJson, countryDataJson.objects.countries).features;\r\n    \r\n    if(countries && selectedCountries && selectedCountries.length === 1) {\r\n      const match = countries.find(x => x.properties.name.toLowerCase() === selectedCountries[0].name.trim().toLowerCase()); \r\n      \r\n      \r\n      if(match) {\r\n        const countryArea = area(match);\r\n        const scale = countryArea / 1_000_000;\r\n        \r\n        const zoom = Math.max(2.5, Math.min(7.5, 9.5 - Math.log10(scale) * 0.85));\r\n        \r\n\r\n        setCenter(geoCentroid(match));\r\n        console.log(zoom);\r\n        setZoom(isFullSize ? 1 : zoom);\r\n      }\r\n      else {\r\n        setZoom(1);\r\n        setCenter([0, 0]);\r\n      }\r\n    }\r\n  }, [countryDataJson, selectedCountries])\r\n\r\n  return (\r\n    countryDataJson && selectedCountries && (\r\n      <ComposableMap\r\n        projection=\"geoMercator\"\r\n        className=\"map-container\"\r\n      >\r\n        <ZoomableGroup\r\n          zoom={zoom}\r\n          center={center}\r\n          minZoom={1}\r\n          maxZoom={8}\r\n          translateExtent={[[-1000, -500], [1000, 500]]}\r\n        >\r\n          <Geographies geography={countryDataJson}>\r\n            {({ geographies }) =>\r\n              geographies.map((geo) => {\r\n                var isSearched = false;\r\n\r\n                selectedCountries.map(country => {\r\n                  console.log(country);\r\n                    isSearched = geo.properties.name.toLowerCase() === country.name.toLowerCase();\r\n                })\r\n\r\n                return (\r\n                    <Geography\r\n                      key={geo.rsmKey}\r\n                      geography={geo}\r\n                      fill={isSearched ? \"#996cfb\" : \"#e0e0e0\"}\r\n                      stroke=\"#ffffff\"\r\n                      style={{\r\n                        default: { outline: \"none\" },\r\n                        hover: { fill: \"#a78bfa\", outline: \"none\" },\r\n                        pressed: { fill: \"#7243da\", outline: \"none\" },\r\n                      }}\r\n                    />\r\n                )})\r\n            }\r\n          </Geographies>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    )\r\n  );\r\n}\r\n\r\nexport default WorldMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}