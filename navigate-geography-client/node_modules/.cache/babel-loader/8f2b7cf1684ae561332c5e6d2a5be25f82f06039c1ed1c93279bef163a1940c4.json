{"ast":null,"code":"// index.ts\nimport { bearing } from \"@turf/bearing\";\nimport { destination } from \"@turf/destination\";\nimport { distance as measureDistance } from \"@turf/distance\";\nimport { point } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\nfunction along(line, distance) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const geom = getGeom(line);\n  const coords = geom.coordinates;\n  let travelled = 0;\n  for (let i = 0; i < coords.length; i++) {\n    if (distance >= travelled && i === coords.length - 1) {\n      break;\n    } else if (travelled >= distance) {\n      const overshot = distance - travelled;\n      if (!overshot) {\n        return point(coords[i]);\n      } else {\n        const direction = bearing(coords[i], coords[i - 1]) - 180;\n        const interpolated = destination(coords[i], overshot, direction, options);\n        return interpolated;\n      }\n    } else {\n      travelled += measureDistance(coords[i], coords[i + 1], options);\n    }\n  }\n  return point(coords[coords.length - 1]);\n}\nvar turf_along_default = along;\nexport { along, turf_along_default as default };","map":{"version":3,"names":["bearing","destination","distance","measureDistance","point","getGeom","along","line","options","arguments","length","undefined","geom","coords","coordinates","travelled","i","overshot","direction","interpolated","turf_along_default"],"sources":["C:\\Users\\nzhvania\\Desktop\\navigate-geography\\node_modules\\@turf\\along\\index.ts"],"sourcesContent":["import { Feature, LineString, Point } from \"geojson\";\nimport { bearing } from \"@turf/bearing\";\nimport { destination } from \"@turf/destination\";\nimport { distance as measureDistance } from \"@turf/distance\";\nimport { point, Units } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\n\n/**\n * Takes a {@link LineString} and returns a {@link Point} at a specified distance along the line.\n *\n * @function\n * @param {Feature<LineString>|LineString} line input line\n * @param {number} distance distance along the line\n * @param {Object} [options] Optional parameters\n * @param {Units} [options.units=\"kilometers\"] can be degrees, radians, miles, or kilometers\n * @returns {Feature<Point>} Point `distance` `units` along the line\n * @example\n * var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]]);\n * var options = {units: 'miles'};\n *\n * var along = turf.along(line, 200, options);\n *\n * //addToMap\n * var addToMap = [along, line]\n */\nfunction along(\n  line: Feature<LineString> | LineString,\n  distance: number,\n  options: { units?: Units } = {}\n): Feature<Point> {\n  // Get Coords\n  const geom = getGeom(line);\n  const coords = geom.coordinates;\n  let travelled = 0;\n  for (let i = 0; i < coords.length; i++) {\n    if (distance >= travelled && i === coords.length - 1) {\n      break;\n    } else if (travelled >= distance) {\n      const overshot = distance - travelled;\n      if (!overshot) {\n        return point(coords[i]);\n      } else {\n        const direction = bearing(coords[i], coords[i - 1]) - 180;\n        const interpolated = destination(\n          coords[i],\n          overshot,\n          direction,\n          options\n        );\n        return interpolated;\n      }\n    } else {\n      travelled += measureDistance(coords[i], coords[i + 1], options);\n    }\n  }\n  return point(coords[coords.length - 1]);\n}\n\nexport { along };\nexport default along;\n"],"mappings":";AACA,SAASA,OAAA,QAAe;AACxB,SAASC,WAAA,QAAmB;AAC5B,SAASC,QAAA,IAAYC,eAAA,QAAuB;AAC5C,SAASC,KAAA,QAAoB;AAC7B,SAASC,OAAA,QAAe;AAoBxB,SAASC,MACPC,IAAA,EACAL,QAAA,EAEgB;EAAA,IADhBM,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA6B,CAAC;EAG9B,MAAMG,IAAA,GAAOP,OAAA,CAAQE,IAAI;EACzB,MAAMM,MAAA,GAASD,IAAA,CAAKE,WAAA;EACpB,IAAIC,SAAA,GAAY;EAChB,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAIH,MAAA,CAAOH,MAAA,EAAQM,CAAA,IAAK;IACtC,IAAId,QAAA,IAAYa,SAAA,IAAaC,CAAA,KAAMH,MAAA,CAAOH,MAAA,GAAS,GAAG;MACpD;IACF,WAAWK,SAAA,IAAab,QAAA,EAAU;MAChC,MAAMe,QAAA,GAAWf,QAAA,GAAWa,SAAA;MAC5B,IAAI,CAACE,QAAA,EAAU;QACb,OAAOb,KAAA,CAAMS,MAAA,CAAOG,CAAC,CAAC;MACxB,OAAO;QACL,MAAME,SAAA,GAAYlB,OAAA,CAAQa,MAAA,CAAOG,CAAC,GAAGH,MAAA,CAAOG,CAAA,GAAI,CAAC,CAAC,IAAI;QACtD,MAAMG,YAAA,GAAelB,WAAA,CACnBY,MAAA,CAAOG,CAAC,GACRC,QAAA,EACAC,SAAA,EACAV,OACF;QACA,OAAOW,YAAA;MACT;IACF,OAAO;MACLJ,SAAA,IAAaZ,eAAA,CAAgBU,MAAA,CAAOG,CAAC,GAAGH,MAAA,CAAOG,CAAA,GAAI,CAAC,GAAGR,OAAO;IAChE;EACF;EACA,OAAOJ,KAAA,CAAMS,MAAA,CAAOA,MAAA,CAAOH,MAAA,GAAS,CAAC,CAAC;AACxC;AAGA,IAAOU,kBAAA,GAAQd,KAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}